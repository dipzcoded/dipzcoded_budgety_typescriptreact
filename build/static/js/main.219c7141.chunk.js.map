{"version":3,"sources":["context/AppReducer.tsx","context/GlobalContext.tsx","component/AddTransactionForm.tsx","utlity.tsx","component/TransactionItem.tsx","component/ExpenseTransaction.tsx","component/IncomeTransaction.tsx","component/TransactionContainer.tsx","component/Balance.tsx","component/Header.tsx","App.tsx","index.tsx"],"names":["Types","incomeReducer","state","actions","type","CreateIncome","incomeData","DeleteIncome","filter","el","id","incomeId","expenseReducer","CreateExpense","expenseData","DeleteExpense","expenseId","initialState","incomes","JSON","parse","localStorage","getItem","expenses","GlobalContext","createContext","dispatch","mainReducer","action","GlobalProvider","children","useReducer","Provider","value","AddTransactionForm","onChange","onSumbit","useContext","useState","detail","amount","transaction","setTransaction","e","target","name","preventDefault","newTransaction","uuidv4","Math","abs","Number","useEffect","data1","data2","length","setItem","stringify","saveToDB","className","placeholder","onClick","disabled","TransactionItem","onDelete","percentageExpense","ceil","map","reduce","prevVal","nextVal","toFixed","isFinite","isNaN","ExpenseTransaction","IncomeTransaction","TransactionContainer","Balance","balance","totalIncome","totalExpense","round","Header","Date","getMonth","getFullYear","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAGYA,E,4FAAAA,K,6BAAAA,E,6BAAAA,E,+BAAAA,E,gCAAAA,M,KAiBL,IAAMC,EAAgB,SAC3BC,EACAC,GAEA,OAAQA,EAAQC,MACd,KAAKJ,EAAMK,aACT,MAAM,CAAN,eAAaF,EAAQG,aAArB,mBAAsCJ,IAExC,KAAKF,EAAMO,aACT,OAAO,YAAIL,EAAMM,QAAO,SAACC,GAAD,OAAQA,EAAGC,KAAOP,EAAQQ,aAEpD,QACE,OAAOT,IAKAU,EAAiB,SAC5BV,EACAC,GAEA,OAAQA,EAAQC,MACd,KAAKJ,EAAMa,cACT,MAAM,CAAN,eAAaV,EAAQW,cAArB,mBAAuCZ,IAEzC,KAAKF,EAAMe,cACT,OAAO,YAAIb,EAAMM,QAAO,SAACC,GAAD,OAAQA,EAAGC,KAAOP,EAAQa,cACpD,QACE,OAAOd,I,OC3BPe,EAA+B,CACnCC,QAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,MACvDC,SAAUJ,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,OAI9CE,EAAgBC,wBAG1B,CACDvB,MAAOe,EACPS,SAAU,kBAAM,QAIZC,EAAc,SAAC,EAEnBC,GAFkB,IAChBL,EADgB,EAChBA,SAAUL,EADM,EACNA,QADM,MAGd,CACJA,QAASjB,EAAciB,EAASU,GAChCL,SAAUX,EAAeW,EAAUK,KAIxBC,EAA2B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAC9BC,qBAAWJ,EAAaV,GADM,mBACjDf,EADiD,KAC1CwB,EAD0C,KAExD,OACE,cAACF,EAAcQ,SAAf,CAAwBC,MAAO,CAAE/B,QAAOwB,YAAxC,SACGI,KCwDQI,EA9FY,WAAM,IAgB3BC,EAEAC,EAlB2B,EAK3BC,qBAAWb,GALgB,IAG7BtB,MAASqB,EAHoB,EAGpBA,SAAUL,EAHU,EAGVA,QACnBQ,EAJ6B,EAI7BA,SAJ6B,EAQOY,mBAA4B,CAChElC,KAAM,MACNmC,OAAQ,GACRC,OAAQ,IAXqB,mBAQxBC,EARwB,KAQXC,EARW,KAcvBtC,EAAyBqC,EAAzBrC,KAAMmC,EAAmBE,EAAnBF,OAAQC,EAAWC,EAAXD,OAwCtB,OAjCAL,EAAW,SAACQ,GACVD,EAAe,2BAAKD,GAAN,kBAAoBE,EAAEC,OAAOC,KAAOF,EAAEC,OAAOX,UAE7DG,EAAW,SAACO,GACVA,EAAEG,iBACF,IAAIC,EAAuC,CACzCrC,GAAIsC,cACJT,SACAC,OAAQS,KAAKC,IAAIC,OAAOX,IACxBpC,QAGAsB,EADW,QAATtB,EACO,CACPA,KAAMJ,EAAMK,aACZC,WAAYyC,GAGL,CACP3C,KAAMJ,EAAMa,cACZC,YAAaiC,IAGjBL,EAAe,CACbtC,KAAM,MACNmC,OAAQ,GACRC,OAAQ,KAIZY,qBAAU,YCrCY,SACtBC,EACAC,GAEA,IAAIpC,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,MACxDC,EAAWJ,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,MACzDJ,EAAQqC,QAAWhC,EAASgC,OAI/BlC,aAAamC,QAAQ,UAAWrC,KAAKsC,UAAUJ,IAC/ChC,aAAamC,QAAQ,WAAYrC,KAAKsC,UAAUH,ID2BhDI,CAASxC,EAASK,KACjB,CAACL,EAASK,IAGX,qBAAKoC,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,yBACEd,KAAK,OACLc,UAAS,oBAAwB,QAATvD,GAAkB,QAC1C6B,MAAO7B,EACP+B,SAAUA,EAJZ,UAME,wBAAQF,MAAM,MAAd,eACA,wBAAQA,MAAM,MAAd,kBAEF,uBACE7B,KAAK,OACLyC,KAAK,SACLZ,MAAOM,EACPoB,UAAS,2BAA+B,QAATvD,GAAkB,QACjDwD,YAAY,kBACZzB,SAAUA,IAEZ,uBACE/B,KAAK,SACLyC,KAAK,SACLc,UAAS,qBAAyB,QAATvD,GAAkB,QAC3CwD,YAAY,QACZ3B,MAAOO,EACPL,SAAUA,IAEZ,wBACEwB,UAAS,mBAAuB,QAATvD,GAAkB,QACzCyD,QAASzB,EACT0B,UAAWvB,IAAWC,EAHxB,SAKE,mBAAGmB,UAAU,+BElCRI,EAzD8B,SAAC,GAEvC,IAaDC,EAbA,IADJvB,YAAeD,EACX,EADWA,OAAQD,EACnB,EADmBA,OAAQnC,EAC3B,EAD2BA,KAAMM,EACjC,EADiCA,GACjC,EAIA2B,qBAAWb,GAFJN,EAFP,EAEFhB,MAASgB,QACTQ,EAHE,EAGFA,SAEIuC,EAAoBhB,KAAKiB,KAC5B1B,EACCtB,EACGiD,KAAI,SAAC1D,GAAD,OAAQA,EAAG+B,UACf4B,QAAO,SAACC,EAASC,GAAV,OAAsBD,EAAUC,IAAS,GACnD,KAmBJ,OAfAN,EAAW,SAACrB,GACVA,EAAEG,iBAEApB,EADW,QAATtB,EACO,CACPA,KAAMJ,EAAMO,aACZI,SAAUD,GAGH,CACPN,KAAMJ,EAAMe,cACZC,UAAWN,KAMf,sBAAKiD,UAAU,gBAAf,UACE,qBAAKA,UAAU,oBAAf,SAAoCpB,IACpC,sBAAKoB,UAAU,iBAAf,UACE,sBAAKA,UAAU,cAAf,UACY,QAATvD,EAAiB,IAAM,IAD1B,IACgCoC,EAAO+B,QAAQ,MAErC,QAATnE,GACC,sBAAKuD,UAAU,mBAAf,WACIR,OAAOqB,SAASP,IAClBd,OAAOsB,MAAMR,GACT,EACAA,EAJN,OAQF,qBAAKN,UAAU,eAAf,SACE,wBAAQA,UAAU,oBAAoBE,QAASG,EAA/C,SACE,mBAAGL,UAAU,qCCjCVe,EAnBY,WAAO,IAErBnD,EACPc,qBAAWb,GADbtB,MAASqB,SAGX,OACE,sBAAKoC,UAAU,WAAf,UACE,oBAAIA,UAAU,kBAAd,sBAEA,qBAAKA,UAAU,iBAAf,SACGpC,EAASgC,OAAS,GACjBhC,EAAS4C,KAAI,SAAC1D,GAAD,OACX,cAAC,EAAD,CAA6BgC,YAAahC,GAApBA,EAAGC,aCMtBiE,EAlBW,WAAO,IAEpBzD,EACPmB,qBAAWb,GADbtB,MAASgB,QAEX,OACE,sBAAKyC,UAAU,SAAf,UACE,oBAAIA,UAAU,eAAd,oBAEA,qBAAKA,UAAU,eAAf,SACGzC,EAAQqC,OAAS,GAChBrC,EAAQiD,KAAI,SAAC1D,GAAD,OACV,cAAC,EAAD,CAA6BgC,YAAahC,GAApBA,EAAGC,aCFtBkE,EATc,WAC3B,OACE,sBAAKjB,UAAU,qBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCiDSkB,EAtDC,WAAO,IAAD,EAGhBxC,qBAAWb,GADbtB,MAASgB,EAFS,EAETA,QAASK,EAFA,EAEAA,SAEduD,EACJ5D,EACGiD,KAAI,SAAC1D,GAAD,OAAQA,EAAG+B,UACf4B,QAAO,SAACC,EAASC,GAAV,OAAsBD,EAAUC,IAAS,GACnD/C,EACG4C,KAAI,SAAC1D,GAAD,OAAQA,EAAG+B,UACf4B,QAAO,SAACC,EAASC,GAAV,OAAsBD,EAAUC,IAAS,GAC/CS,EAAc7D,EACjBiD,KAAI,SAAC1D,GAAD,OAAQA,EAAG+B,UACf4B,QAAO,SAACC,EAASC,GAAV,OAAsBD,EAAUC,IAAS,GAC7CU,EAAezD,EAClB4C,KAAI,SAAC1D,GAAD,OAAQA,EAAG+B,UACf4B,QAAO,SAACC,EAASC,GAAV,OAAsBD,EAAUC,IAAS,GAC7CL,EAAoBhB,KAAKgC,MAAOD,EAAeD,EAAe,KAEpE,OACE,eAAC,WAAD,WACE,sBAAKpB,UAAU,gBAAf,UACGmB,EAAU,GAAK,IADlB,IACwBA,EAAQP,QAAQ,MAGxC,sBAAKZ,UAAU,0BAAf,UACE,qBAAKA,UAAU,uBAAf,oBACA,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,wBAAf,eACKoB,EAAYR,QAAQ,MAEzB,qBAAKZ,UAAU,6BAAf,wBAIJ,sBAAKA,UAAU,4BAAf,UACE,qBAAKA,UAAU,yBAAf,sBACA,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,0BAAf,eACKqB,EAAaT,QAAQ,MAE1B,sBAAKZ,UAAU,+BAAf,UACGR,OAAOsB,MAAMR,KACbd,OAAOqB,SAASP,GACb,EACAA,EAJN,iBC1BKiB,EAdA,WACb,OACE,qBAAKvB,UAAU,MAAf,SACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,gBAAf,iCNFa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,aAGgB,IAAIwB,MAAOC,YMZgB,IACrC,sBAAMzB,UAAU,uBAAhB,UNRD,IAAIwB,MAAOE,gBMMZ,OAIA,cAAC,EAAD,UCSOC,EAZH,WACV,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,sBAAK3B,UAAU,SAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCVR4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.219c7141.chunk.js","sourcesContent":["import { TransactionInterface } from \"./GlobalContext\";\r\n\r\n// types\r\nexport enum Types {\r\n  CreateIncome = \"CREATE_INCOME\",\r\n  DeleteIncome = \"DELETE_INCOME\",\r\n  CreateExpense = \"CREATE_EXPENSE\",\r\n  DeleteExpense = \"DELETE_EXPENSE\",\r\n}\r\n\r\n// actions\r\nexport type IncomeActions =\r\n  | { type: Types.CreateIncome; incomeData: TransactionInterface }\r\n  | { type: Types.DeleteIncome; incomeId: string };\r\n\r\nexport type ExpenseActions =\r\n  | { type: Types.CreateExpense; expenseData: TransactionInterface }\r\n  | { type: Types.DeleteExpense; expenseId: string };\r\n\r\n// income reducer\r\nexport const incomeReducer = (\r\n  state: TransactionInterface[],\r\n  actions: ExpenseActions | IncomeActions\r\n) => {\r\n  switch (actions.type) {\r\n    case Types.CreateIncome:\r\n      return [{ ...actions.incomeData }, ...state];\r\n\r\n    case Types.DeleteIncome:\r\n      return [...state.filter((el) => el.id !== actions.incomeId)];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// expense reducer\r\nexport const expenseReducer = (\r\n  state: TransactionInterface[],\r\n  actions: ExpenseActions | IncomeActions\r\n) => {\r\n  switch (actions.type) {\r\n    case Types.CreateExpense:\r\n      return [{ ...actions.expenseData }, ...state];\r\n\r\n    case Types.DeleteExpense:\r\n      return [...state.filter((el) => el.id !== actions.expenseId)];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport {\r\n  incomeReducer,\r\n  expenseReducer,\r\n  ExpenseActions,\r\n  IncomeActions,\r\n} from \"./AppReducer\";\r\n\r\n// defining the data structure of my states\r\nexport interface TransactionInterface {\r\n  id: string;\r\n  detail: string;\r\n  amount: number;\r\n  type: string;\r\n}\r\n\r\ninterface TransactionObj {\r\n  incomes: TransactionInterface[];\r\n  expenses: TransactionInterface[];\r\n}\r\n\r\nconst initialState: TransactionObj = {\r\n  incomes: JSON.parse(localStorage.getItem(\"incomes\") || \"[]\"),\r\n  expenses: JSON.parse(localStorage.getItem(\"expenses\") || \"[]\"),\r\n};\r\n\r\n// create context\r\nexport const GlobalContext = createContext<{\r\n  state: TransactionObj;\r\n  dispatch: React.Dispatch<IncomeActions | ExpenseActions>;\r\n}>({\r\n  state: initialState,\r\n  dispatch: () => null,\r\n});\r\n\r\n// global reducer\r\nconst mainReducer = (\r\n  { expenses, incomes }: TransactionObj,\r\n  action: IncomeActions | ExpenseActions\r\n) => ({\r\n  incomes: incomeReducer(incomes, action),\r\n  expenses: expenseReducer(expenses, action),\r\n});\r\n\r\n// provider component\r\nexport const GlobalProvider: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(mainReducer, initialState);\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { TransactionInterface, GlobalContext } from \"../context/GlobalContext\";\r\nimport { Types } from \"../context/AppReducer\";\r\nimport { saveToDB } from \"../utlity\";\r\ntype TransactionDetail = {\r\n  type: string;\r\n  detail: string;\r\n  amount: number;\r\n};\r\n\r\nconst AddTransactionForm = () => {\r\n  // context\r\n  const {\r\n    state: { expenses, incomes },\r\n    dispatch,\r\n  } = useContext(GlobalContext);\r\n\r\n  // my state\r\n  const [transaction, setTransaction] = useState<TransactionDetail>({\r\n    type: \"inc\",\r\n    detail: \"\",\r\n    amount: 0,\r\n  });\r\n  // destructing my transaction object\r\n  const { type, detail, amount } = transaction;\r\n  // onChange func\r\n  let onChange: (e: any) => void;\r\n  // onSubmit func emiited by button\r\n  let onSumbit: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n\r\n  // creating the funcs\r\n  onChange = (e) => {\r\n    setTransaction({ ...transaction, [e.target.name]: e.target.value });\r\n  };\r\n  onSumbit = (e) => {\r\n    e.preventDefault();\r\n    let newTransaction: TransactionInterface = {\r\n      id: uuidv4(),\r\n      detail,\r\n      amount: Math.abs(Number(amount)),\r\n      type,\r\n    };\r\n    if (type === \"inc\") {\r\n      dispatch({\r\n        type: Types.CreateIncome,\r\n        incomeData: newTransaction,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: Types.CreateExpense,\r\n        expenseData: newTransaction,\r\n      });\r\n    }\r\n    setTransaction({\r\n      type: \"inc\",\r\n      detail: \"\",\r\n      amount: 0,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveToDB(incomes, expenses);\r\n  }, [incomes, expenses]);\r\n\r\n  return (\r\n    <div className=\"add\">\r\n      <div className=\"add__container\">\r\n        <select\r\n          name=\"type\"\r\n          className={`add__type ${type === \"exp\" && \"debt\"}`}\r\n          value={type}\r\n          onChange={onChange}\r\n        >\r\n          <option value=\"inc\">+</option>\r\n          <option value=\"exp\">-</option>\r\n        </select>\r\n        <input\r\n          type=\"text\"\r\n          name=\"detail\"\r\n          value={detail}\r\n          className={`add__description ${type === \"exp\" && \"debt\"}`}\r\n          placeholder=\"Add description\"\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          className={`add__value ${type === \"exp\" && \"debt\"}`}\r\n          placeholder=\"Value\"\r\n          value={amount}\r\n          onChange={onChange}\r\n        />\r\n        <button\r\n          className={`add__btn ${type === \"exp\" && \"debt\"}`}\r\n          onClick={onSumbit}\r\n          disabled={!detail || !amount}\r\n        >\r\n          <i className=\"bx bx-check-circle\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTransactionForm;\r\n","import { TransactionInterface } from \"./context/GlobalContext\";\r\nexport const displayYear = () => {\r\n  return new Date().getFullYear();\r\n};\r\n\r\nexport const displayMonth = () => {\r\n  const monthArray = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  return monthArray[new Date().getMonth()];\r\n};\r\n\r\nexport const saveToDB = (\r\n  data1: TransactionInterface[],\r\n  data2: TransactionInterface[]\r\n): void => {\r\n  let incomes = JSON.parse(localStorage.getItem(\"incomes\") || \"[]\");\r\n  let expenses = JSON.parse(localStorage.getItem(\"expenses\") || \"[]\");\r\n  if (!incomes.length && !expenses.length) {\r\n    localStorage.setItem(\"incomes\", JSON.stringify(data1));\r\n    localStorage.setItem(\"expenses\", JSON.stringify(data2));\r\n  } else {\r\n    localStorage.setItem(\"incomes\", JSON.stringify(data1));\r\n    localStorage.setItem(\"expenses\", JSON.stringify(data2));\r\n  }\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { TransactionInterface, GlobalContext } from \"../context/GlobalContext\";\r\nimport { Types } from \"../context/AppReducer\";\r\ntype PropsType = {\r\n  transaction: TransactionInterface;\r\n};\r\n\r\nconst TransactionItem: React.FC<PropsType> = ({\r\n  transaction: { amount, detail, type, id },\r\n}) => {\r\n  const {\r\n    state: { incomes },\r\n    dispatch,\r\n  } = useContext(GlobalContext);\r\n  const percentageExpense = Math.ceil(\r\n    (amount /\r\n      incomes\r\n        .map((el) => el.amount)\r\n        .reduce((prevVal, nextVal) => prevVal + nextVal, 0)) *\r\n      100\r\n  );\r\n\r\n  let onDelete: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  onDelete = (e) => {\r\n    e.preventDefault();\r\n    if (type === \"inc\") {\r\n      dispatch({\r\n        type: Types.DeleteIncome,\r\n        incomeId: id,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: Types.DeleteExpense,\r\n        expenseId: id,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"item clearfix\">\r\n      <div className=\"item__description\">{detail}</div>\r\n      <div className=\"right clearfix\">\r\n        <div className=\"item__value\">\r\n          {type === \"inc\" ? \"+\" : \"-\"} {amount.toFixed(2)}\r\n        </div>\r\n        {type === \"exp\" && (\r\n          <div className=\"item__percentage\">\r\n            {!Number.isFinite(percentageExpense) ||\r\n            Number.isNaN(percentageExpense)\r\n              ? 0\r\n              : percentageExpense}\r\n            %\r\n          </div>\r\n        )}\r\n        <div className=\"item__delete\">\r\n          <button className=\"item__delete--btn\" onClick={onDelete}>\r\n            <i className=\"ion-ios-close-outline\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionItem;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext, TransactionInterface } from \"../context/GlobalContext\";\r\nimport TransactionItem from \"./TransactionItem\";\r\n\r\nconst ExpenseTransaction = () => {\r\n  const {\r\n    state: { expenses },\r\n  } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div className=\"expenses\">\r\n      <h2 className=\"expenses__title\">Expenses</h2>\r\n\r\n      <div className=\"expenses__list\">\r\n        {expenses.length > 0 &&\r\n          expenses.map((el: TransactionInterface) => (\r\n            <TransactionItem key={el.id} transaction={el} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseTransaction;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext, TransactionInterface } from \"../context/GlobalContext\";\r\nimport TransactionItem from \"./TransactionItem\";\r\n\r\nconst IncomeTransaction = () => {\r\n  const {\r\n    state: { incomes },\r\n  } = useContext(GlobalContext);\r\n  return (\r\n    <div className=\"income\">\r\n      <h2 className=\"icome__title\">Income</h2>\r\n\r\n      <div className=\"income__list\">\r\n        {incomes.length > 0 &&\r\n          incomes.map((el: TransactionInterface) => (\r\n            <TransactionItem key={el.id} transaction={el} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IncomeTransaction;\r\n","import React from \"react\";\r\nimport ExpenseTransaction from \"./ExpenseTransaction\";\r\nimport IncomeTransaction from \"./IncomeTransaction\";\r\n\r\nconst TransactionContainer = () => {\r\n  return (\r\n    <div className=\"container clearfix\">\r\n      <IncomeTransaction />\r\n      <ExpenseTransaction />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionContainer;\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\n\r\nconst Balance = () => {\r\n  const {\r\n    state: { incomes, expenses },\r\n  } = useContext(GlobalContext);\r\n  const balance =\r\n    incomes\r\n      .map((el) => el.amount)\r\n      .reduce((prevVal, nextVal) => prevVal + nextVal, 0) -\r\n    expenses\r\n      .map((el) => el.amount)\r\n      .reduce((prevVal, nextVal) => prevVal + nextVal, 0);\r\n  const totalIncome = incomes\r\n    .map((el) => el.amount)\r\n    .reduce((prevVal, nextVal) => prevVal + nextVal, 0);\r\n  const totalExpense = expenses\r\n    .map((el) => el.amount)\r\n    .reduce((prevVal, nextVal) => prevVal + nextVal, 0);\r\n  const percentageExpense = Math.round((totalExpense / totalIncome) * 100);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"budget__value\">\r\n        {balance > 0 && \"+\"} {balance.toFixed(2)}\r\n      </div>\r\n\r\n      <div className=\"budget__income clearfix\">\r\n        <div className=\"budget__income--text\">Income</div>\r\n        <div className=\"right\">\r\n          <div className=\"budget__income--value\">\r\n            + {totalIncome.toFixed(2)}\r\n          </div>\r\n          <div className=\"budget__income--percentage\">&nbsp;</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"budget__expenses clearfix\">\r\n        <div className=\"budget__expenses--text\">Expenses</div>\r\n        <div className=\"right clearfix\">\r\n          <div className=\"budget__expenses--value\">\r\n            - {totalExpense.toFixed(2)}\r\n          </div>\r\n          <div className=\"budget__expenses--percentage\">\r\n            {Number.isNaN(percentageExpense) ||\r\n            !Number.isFinite(percentageExpense)\r\n              ? 0\r\n              : percentageExpense}\r\n            %\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","import React from \"react\";\r\nimport Balance from \"./Balance\";\r\nimport { displayMonth, displayYear } from \"../utlity\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"top\">\r\n      <div className=\"budget\">\r\n        <div className=\"budget__title\">\r\n          Available Budget in {displayMonth()}{\" \"}\r\n          <span className=\"budget__title--month\">{displayYear()}</span>:\r\n        </div>\r\n        <Balance />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport AddTransactionForm from \"./component/AddTransactionForm\";\nimport TransactionContainer from \"./component/TransactionContainer\";\nimport { GlobalProvider } from \"./context/GlobalContext\";\n\n// components\nimport Header from \"./component/Header\";\n\nconst App = () => {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"bottom\">\n        <AddTransactionForm />\n        <TransactionContainer />\n      </div>\n    </GlobalProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}